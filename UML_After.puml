@startuml

skinparam class {
    BackgroundColor Plum
    BorderColor Purple

	BackgroundColor<<PNG>> Moccasin
	BackgroundColor<<XML>> Moccasin
	BackgroundColor<<SHAPE>> Moccasin
	BackgroundColor<<JPG>> Moccasin

	BackgroundColor<<PREFERENCESCREEN>> PaleGreen
	BackgroundColor<<RESOURCES>> PaleGreen
	BackgroundColor<<MENU>> PaleGreen
	BackgroundColor<<TOOLBAR>> PaleGreen
	BackgroundColor<<NESTEDSCROLLVIEW>> PaleGreen
	BackgroundColor<<SET>> PaleGreen
	BackgroundColor<<MODEL>> PaleGreen

	ArrowColor Black

	BorderColor<<PNG>> Coral
	BorderColor<<XML>> Coral
	BorderColor<<SHAPE>> Coral
	BorderColor<<JPG>> Coral

	BorderColor<<PREFERENCESCREEN>> OliveDrab
	BorderColor<<RESOURCES>> OliveDrab
    BorderColor<<MENU>> OliveDrab
    BorderColor<<TOOLBAR>> OliveDrab
    BorderColor<<NESTEDSCROLLVIEW>> OliveDrab
    BorderColor<<SET>> OliveDrab
    BorderColor<<MODEL>> OliveDrab

}

interface AndroidManifest << (M,green) MANIFEST >>
interface ic_launcher << (P,blue) PNG >>
AndroidManifest --> ic_launcher
AndroidManifest --> Splashscreen
AndroidManifest --> Login
AndroidManifest --> ConnectDrawer
AndroidManifest ..> strings
AndroidManifest ..> styles

interface settings << (P,grey) PREFERENCESCREEN >>
settings ..> strings

interface colors << (R,yellow) RESOURCES >>
interface dimens << (R,yellow) RESOURCES >>
interface strings << (R,yellow) RESOURCES >>
interface styles << (R,yellow) RESOURCES >>
styles ..> colors

interface drawer_menu << (M,lightgrey) MENU >>

interface toolbar_layout << (T,lightyellow) TOOLBAR >>
toolbar_layout ..> styles

interface navigation_drawer_header << (X,lightblue) XML >>
interface dobbykopf << (P,blue) PNG >>
navigation_drawer_header ..> dobbykopf
navigation_drawer_header ..> head_background

interface fragment_information << (X,lightblue) XML >>
fragment_information ..> styles
fragment_information ..> dimens
fragment_information --> content_infoabout

interface fragment_connect << (X,lightblue) XML >>
fragment_connect ..> strings

interface content_infoabout << (N,darkgrey) NESTEDSCROLLVIEW >>
content_infoabout ..> strings
content_infoabout ..> dimens

interface activity_splash << (X,lightblue) XML >>
interface background << (J,blue) JPG >>
activity_splash ..> background
activity_splash --> logo

interface activity_login << (X,lightblue) XML >>
activity_login ..> dimens
activity_login --> logo

interface activity_connect_drawer << (X,lightblue) XML >>
activity_connect_drawer --> toolbar_layout
activity_connect_drawer --> drawer_menu
activity_connect_drawer ..> navigation_drawer_header

interface logo << (P,blue) PNG >>
interface head_background << (S,darkgreen) SHAPE >>
interface welcome_animation << (S,lightgreen) SET >>

class Splashscreen < extends Activity > {
	imageView:ImageView
	animation:Animation

	# onCreate(savedInstanceState:Bundle)
	- animationListener(animation:Animation)
	+ onBackPressed()
}
Splashscreen ..> activity_splash
Splashscreen ..> welcome_animation
Splashscreen ..> Login

class Settings < extends Activity > {
	- {static} TAG_DISABLE_NOTIFICATIONS:String
	- {static} TAG_DISABLE_MULTIPLE_NOTIFICATIONS:String

	+ onCreate(savedInstanceState:Bundle)
	+ {static} pref_notifications_disabled(context:Context):Boolean
	+ {static} pref_multiple_notifications_disabled(context:Context):Boolean
}
Settings +-- PrefsFragment

class PrefsFragment < extends PreferenceFragment > {
	+ onCreate(savedInstanceState:Bundle)
}
PrefsFragment ..> settings

class LoginData <<MODEL>> {
	{static} curruser:String
	{static} logged:boolean
	name:String
	pass:String
	{static} user:ArrayList<LoginData>

	{static} main()
	+ LoginData(name:String, pass:String)
	{static} isValidName(name:String):boolean
	{static} isValidPass(name:String, pass:String):boolean
	{static} setCurrUser(Name:String)
	{static} getCurrUser():String
	{static} setLogged()
	{static} notLogged()
	{static} getLogged():boolean
}

class Login < extends AppCompatActivity > {
	confirm:Button
	NameText:EditText
	PassText:EditText
	Name:String
	Pass:String
	text:CharSequence

	# onCreate(savedInstanceState:Bundle)
	+ onClickFunction(v:View)
	- setUser()
	- startIntent()
	- toastShow()
	+ onBackPressed()
}
Login ..> activity_login
Login ..> LoginData
Login ..> strings

class InformationFragment < extends Fragment > {
	+ InformationFragment()

	+ onCreateView(inflater:LayoutInflater, container:ViewGroup, savedInstanceState:Bundle):View
	- clickListener(view:View)
}
InformationFragment ..> fragment_information
InformationFragment ..> strings

class ConnectFragment < extends Fragment > {
	- {static} TAG_LOG:String
	- {static} TAG_JSON_TYPE:String
	- {static} TAG_JSON_MSG:String
	- isConnected:boolean
	- wsConnection:WebSocketConnection
	- wsOptions:WebSocketOptions
	- wsURI:URI
	- cmdInput:EditText
	- cmdOutput:TextView
	- connectButton:CircularProgressButton
	- hostname:String
	- portNumber:String
	- timeout:String
	onClickWrapperExit:OnClickWrapper

	+ ConnectFragment()
	+ onCreateView(inflater:LayoutInflater, container:ViewGroup, savedInstanceState:Bundle):View
	+ onResume()
	wsConnect():boolean
	wsSend()
	+ onOpen()
	+ onClose (code:WebSocketCloseNotification, reason:String)
	+ onTextMessage (payload:String)
	+ onRawTextMessage (payload:byte[])
	+ onBinaryMessage (payload:byte[])
	show_info (info:String, showButton:boolean)
	{static} appendText(textView:TextView, text:String, textColor:int)
}
ConnectFragment ..> fragment_connect
ConnectFragment ..> strings

class ConnectDrawer < extends AppCompatActivity > {
	drawerLayout:DrawerLayout
	toolbar:Toolbar
	actionBarDrawerToggle:ActionBarDrawerToggle
	fragmentTransaction:FragmentTransaction
	navigationView:NavigationView

	# onCreate(savedInstanceState:Bundle)
	+ onBackPressed()
	# onPostCreate(savedInstanceState:Bundle)
}
ConnectDrawer ..> activity_connect_drawer
ConnectDrawer ..> strings
ConnectDrawer --> ConnectFragment
ConnectDrawer ..> LoginData
ConnectDrawer ..> Splashscreen
ConnectDrawer --> InformationFragment
ConnectDrawer ..> strings




package SecureWebSocket {
ConnectFragment ..|> WebSocketConnectionObserver
ConnectFragment --> WebSocketConnection
ConnectFragment --> WebSocketOptions

class NoCopyByteArrayOutputStream < extends ByteArrayOutputStream > {
	+ NoCopyByteArrayOutputStream()
	+ NoCopyByteArrayOutputStream(size:int)
	+ getInputStream():InputStream
	+ getByteArray():byte[]
}

class Utf8Validator << MODEL >>{
	- {static} DFA:int[]
	- {static} ACCEPT:int
	- {static} REJECT:int
	- mState:int
	- mPos:int

	+ Utf8Validator()
	+ reset()
	+ position():int
	+ isValid():boolean
	+ validate(data:byte[], off:int, len:int):boolean
	+ validate(data:byte[]):boolean
}

interface WebSocket {
	+ {static} String UTF8_ENCODING

	+ connect(uri:URI, observer:WebSocketConnectionObserver)
	+ connect(uri:URI, observer:WebSocketConnectionObserver, options:WebSocketOptions)
	+ disconnect()
	+ isConnected():boolean
	+ sendBinaryMessage(payload:byte[])
	+ sendRawTextMessage(payload:byte[])
	+ sendTextMessage(payload:String)
}
WebSocket +-- WebSocketConnectionObserver
WebSocket ..> WebSocketOptions
WebSocket ..> WebSocketException : throws

interface WebSocketConnectionObserver {
	+ onOpen()
	+ onClose(code:WebSocketCloseNotification, reason:String)
	+ onTextMessage(payload:String)
	+ onRawTextMessage(payload:byte[])
	+ onBinaryMessage(payload:byte[])
}
WebSocketConnectionObserver +-- WebSocketCloseNotification

enum WebSocketCloseNotification << MODEL >> {
	+{static}NORMAL
	+{static}CANNOT_CONNECT
	+{static}CONNECTION_LOST
	+{static}PROTOCOL_ERROR
	+{static}INTERNAL_ERROR
	+{static}SERVER_ERROR
	+{static}RECONNECT
}

class WebSocketConnection implements WebSocket {
	- mHandler:Handler
	- mWebSocketReader:WebSocketReader
	- mWebSocketWriter:WebSocketWriter
	- mSocket:Socket
	- mSocketThread:SocketThread
	- mWebSocketURI:URI
	- mWebSocketSubprotocols:String[]
	- mWebSocketConnectionObserver:WeakReference<WebSocketConnectionObserver>
	- mWebSocketOptions:WebSocketOptions
	- mPreviousConnection:boolean

	+ WebSocketConnection()
	+ sendTextMessage(payload:String)
	+ sendRawTextMessage(payload:byte[])
	+ sendBinaryMessage(payload:byte[])
	+ isConnected():boolean
	- failConnection(code:WebSocketCloseNotification, reason:String)
	+ connect(webSocketURI:URI, connectionObserver:WebSocket.WebSocketConnectionObserver)
	+ connect(webSocketURI:URI, connectionObserver:WebSocket.WebSocketConnectionObserver, options:WebSocketOptions)
	+ connect(webSocketURI:URI, subprotocols:String[], connectionObserver:WebSocket.WebSocketConnectionObserver, options:WebSocketOptions)
	+ disconnect()
	+ reconnect():boolean
	- connect()
	# scheduleReconnect():boolean
	- onClose(code:WebSocketCloseNotification, reason:String)
	# processAppMessage(message:Object)
	# createWriter()
	# createReader()
	- handleMessage(message:Message)
}
WebSocketConnection +-- SocketThread
WebSocketConnection +-- ThreadHandler
WebSocketConnection --> WebSocketReader
WebSocketConnection --> WebSocketWriter
WebSocketConnection --> WebSocketOptions
WebSocketConnection ..> WebSocketConnectionObserver
WebSocketConnection --> TextMessage
WebSocketConnection --> RawTextMessage
WebSocketConnection --> BinaryMessage
WebSocketConnection ..> WebSocketCloseNotification
WebSocketConnection ..> WebSocketException : throws
WebSocketConnection --> ClientHandshake
WebSocketConnection ..> Message
WebSocketConnection --> Ping
WebSocketConnection --> Pong
WebSocketConnection --> Close
WebSocketConnection --> ServerHandshake
WebSocketConnection --> Error
WebSocketConnection --> ServerError
WebSocketConnection ..> WebSocketStrings

class WebSocketStrings << MODEL >> {
	+ {static} TAG:String
	+ {static} run_sockExc:String
	+ {static} run_ioExc:String
	..For WebSocketConnection..
	+ {static} WS_URI_SCHEME:String
	+ {static} WSS_URI_SCHEME:String
	+ {static} WS_WRITER:String
	+ {static} WS_READER:String
	+ {static} Conn_created:String
	+ {static} Conn_exists:String
	+ {static} Conn_fail_1:String
	+ {static} Conn_fail_2:String
	+ {static} Conn_failed:String
	+ {static} Conn_lost:String
	+ {static} Reconn_scheduled:String
	+ {static} Reconn_started:String
	+ {static} mReader_null:String
	+ {static} mWriter_null:String
	+ {static} close_null:String
	+ {static} mTransportChannel_null:String
	+ {static} observer_null:String
	+ {static} onTextMessage_null:String
	+ {static} onRawTextMessage_null:String
	+ {static} onBinaryMessage_null:String
	+ {static} onOpen_null:String
	+ {static} Uri_null:String
	+ {static} Uri_unsupported:String
	+ {static} ping_received:String
	+ {static} pong_received:String
	+ {static} close_received:String
	+ {static} handshake_received:String
	+ {static} protocol_viol:String
	+ {static} intern_err:String
	+ {static} serv_err:String
	+ {static} writer_created:String
	+ {static} reader_created:String
	+ {static} worker_stopped:String
	..For SocketThread..
	+ {static} WS_CONNECTOR:String
	+ {static} sock_exit:String
	..For WebSocketReader..
	+ {static} wreader_created:String
	+ {static} reader_run:String
	+ {static} read_fail:String
	+ {static} reader_ended:String
	+ {static} quit:String
	+ {static} logik_err:String
	+ {static} rsv_notNull:String
	+ {static} utf_uni_err:String
	+ {static} masked_servFrame:String
	+ {static} dataFrame_opc:String
	+ {static} frag_contrFrame:String
	+ {static} contr_framePay:String
	+ {static} contr_frameOpc:String
	+ {static} frameLenght_tooLarge:String
	+ {static} msg_tooLarge:String
	+ {static} cls_contrFrame:String
	+ {static} contFrame:String
	+ {static} nonContFrame:String
	+ {static} inv_frameLenght_notMinEnc:String
	+ {static} inv_frameLenght:String
	+ {static} cls_inv:String
	+ {static} clsRsn_inv:String
	+ {static} msg_inv:String
	+ {static} run_connLost:String
	+ {static} run_wExc:String
	+ {static} run_Exc:String
	..For WebSocketWriter..
	+ {static} wwriter_created:String
	+ {static} writer_ended:String
	+ {static} writer_run:String
	+ {static} unkwn_msg:String
	+ {static} applBuff_get:String
	+ {static} applBuff_http:String
	+ {static} applBuff_host:String
	+ {static} applBuff_upWeb:String
	+ {static} applBuff_conn:String
	+ {static} applBuff_secKey:String
	+ {static} applBuff_orig:String
	+ {static} applBuff_secProt:String
	+ {static} applBuff_secVers:String
	+ {static} cls_tooLarge:String
	+ {static} pong_tooLarge:String
	+ {static} msgPay_tooLarge:String
}

class SocketThread < extends Thread > {
	- mWebSocketURI:URI
	- mSocket:Socket
	- mFailureMessage:String
	- mHandler:Handler

	+ SocketThread(uri:URI, options:WebSocketOptions)
	+ run()
	+ startConnection()
	+ stopConnection()
	+ getHandler():Handler
	+ getSocket():Socket
	+ getFailureMessage():String
}
SocketThread ..> WebSocketOptions
SocketThread ..> WebSocketStrings

class ThreadHandler < extends Handler > {
	..implemented by WebSocketConnection..
	- mWebSocketConnection:WeakReference<WebSocketConnection>
	__
	+ ThreadHandler(webSocketConnection:WebSocketConnection)
	+ handleMessage(message:Message)
	==
	..implemented by WebSocketWriter..
	- mWebSocketWriterReference:WeakReference<WebSocketWriter>
	__
	+ ThreadHandler(webSocketWriter:WebSocketWriter)
	+ handleMessage(message:Message)
}
ThreadHandler ..> WebSocketConnection
ThreadHandler ..> Message
ThreadHandler ..> WebSocketWriter

class WebSocketException < extends Exception > {
	- {static} serialVersionUID:long

	+ WebSocketException(message:String)
	+ WebSocketException(message:String, t:Throwable)
}

class WebSocketFrameHeader {
	- int mOpcode
	- boolean mFin
	- int mReserved
	- int mHeaderLen
	- int mPayloadLen
	- int mTotalLen
	- byte[] mMask

	+ getOpcode():int
	+ setOpcode(opcode:int)
	+ isFin():boolean
	+ setFin(fin:boolean)
	+ getReserved():int
	+ setReserved(reserved:int)
	+ getHeaderLength():int
	+ setHeaderLength(headerLength:int)
	+ getPayloadLength():int
	+ setPayloadLength(payloadLength:int)
	+ getTotalLength():int
	+ setTotalLen(totalLength:int)
	+ getMask():byte[]
	+ setMask(mask:byte[])
}

class WebSocketMessage {
}
WebSocketMessage +-- WebSocketCloseCode
WebSocketMessage +-- Message
WebSocketMessage +-- Quit
WebSocketMessage +-- ClientHandshake
WebSocketMessage +-- ServerHandshake
WebSocketMessage +-- ConnectionLost
WebSocketMessage +-- ServerError
WebSocketMessage +-- ProtocolViolation
WebSocketMessage +-- Error
WebSocketMessage +-- TextMessage
WebSocketMessage +-- RaxTextMessage
WebSocketMessage +-- BinaryMessage
WebSocketMessage +-- Close
WebSocketMessage +-- Ping
WebSocketMessage +-- Pong

class WebSocketCloseCode << MODEL >> {
	+ {static} NORMAL:int
	+ {static} ENDPOINT_GOING_AWAY:int
	+ {static} ENDPOINT_PROTOCOL_ERROR:int
	+ {static} ENDPOINT_UNSUPPORTED_DATA_TYPE:int
	+ {static} RESERVED:int
	+ {static} RESERVED_NO_STATUS:int
	+ {static} RESERVED_NO_CLOSING_HANDSHAKE:int
	+ {static} ENDPOINT_BAD_DATA:int
	+ {static} POLICY_VIOLATION:int
	+ {static} MESSAGE_TOO_BIG:int
	+ {static} ENDPOINT_NEEDS_EXTENSION:int
	+ {static} UNEXPECTED_CONDITION:int
	+ {static} RESERVED_TLS_REQUIRED:int
}

class Message
class Quit extends Message
class ConnectionLost extends Message

class ClientHandshake extends Message {
	- mURI:URI
	- mOrigin:URI
	- mSubprotocols:String[]

	ClientHandshake(uri:URI)
	ClientHandshake(uri:URI, origin:URI, subprotocols:String[])
	+ getURI():URI
	+ getSubprotocols():String[]
}

class ServerHandshake extends Message {
	+ mSuccess:boolean

	+ ServerHandshake(success:boolean)
}

class ServerError extends Message {
	+ mStatusCode:int
	+ mStatusMessage:String

	+ ServerError(statusCode:int, statusMessage:String)
}

class ProtocolViolation extends Message {
	+ mException:WebSocketException

	+ ProtocolViolation(e:WebSocketException)
}

class Error extends Message {
	+ mException:

	+ Error(e:Exception)
}
Error -() Exception : sets

class TextMessage extends Message {
	+ mPayload:String

	TextMessage(payload:String)
}

class RawTextMessage extends Message {
	+ mPayload:byte[]

	RawTextMessage(payload:byte[])
}

class BinaryMessage extends Message {
	+ mPayload:byte[]

	BinaryMessage(payload:byte[])
}

class Close extends Message {
	- mCode:int
	- mReason:String

	Close()
	Close(code:int)
	Close(code:int, reason:String)
	+ getCode():int
	+ getReason():String
}
Close ..> WebSocketCloseCode

class Ping extends Message {
	+ mPayload:byte[]

	Ping()
	Ping(payload:byte[])
}

class Pong extends Message {
	+ mPayload:byte[]

	Pong()
	Pong(payload:byte[])
}

class WebSocketOptions {
	- mMaxFramePayloadSize:int
	- mMaxMessagePayloadSize:int
	- mReceiveTextMessagesRaw:boolean
	- mTcpNoDelay:boolean
	- mSocketReceiveTimeout:int
	- mSocketConnectTimeout:int
	- mValidateIncomingUtf8:boolean
	- mMaskClientFrames:boolean
	- mReconnectInterval:int

	+ WebSocketOptions()
	+ WebSocketOptions(other:WebSocketOptions)
	+ setReceiveTextMessagesRaw(enabled:boolean)
	+ getReceiveTextMessagesRaw():boolean
	+ setMaxFramePayloadSize(size:int)
	+ getMaxFramePayloadSize():int
	+ setMaxMessagePayloadSize(size:int)
	+ getMaxMessagePayloadSize():int
	+ setTcpNoDelay(enabled:boolean)
	+ getTcpNoDelay():boolean
	+ setSocketReceiveTimeout(timeoutMs:int)
	+ getSocketReceiveTimeout():int
	+ setSocketConnectTimeout(timeoutMs:int)
	+ getSocketConnectTimeout():int
	+ setValidateIncomingUtf8(enabled:boolean)
	+ getValidateIncomingUtf8():boolean
	+ setMaskClientFrames(enabled:boolean)
	+ getMaskClientFrames():boolean
	+ setReconnectInterval(reconnectInterval:int)
	+ getReconnectInterval():int
}

class WebSocketReader < extends Thread > {
	- mWebSocketConnectionHandler:Handler
	- mSocket:Socket
	- mInputStream:InputStream
	- mWebSocketOptions:WebSocketOptions
	- mStopped:boolean
	- mNetworkBuffer:byte[]
	- mApplicationBuffer:ByteBuffer
	- mMessagePayload:NoCopyByteArrayOutputStream
	- mState:ReaderState
	- mInsideMessage:boolean
	- mMessageOpcode:int
	- mFrameHeader:WebSocketFrameHeader
	- mUTF8Validator:Utf8Validator

	+ WebSocketReader(master:Handler, socket:Socket, options:WebSocketOptions, threadName:String)
	+ quit()
	# notify(message:Object)
	- processData():boolean
	# onHandshake(success:boolean)
	# onClose(code:int, reason:String)
	# onPing(payload:byte[])
	# onPong(payload:byte[])
	# onTextMessage(payload:String)
	# onRawTextMessage(payload:byte[])
	# onBinaryMessage(payload:byte[])
	- processHandshake():boolean
	- Pair<Integer, String> parseHTTPStatus()
	- consumeData():boolean
	+ run()
}
WebSocketReader +-- ReaderState
WebSocketReader --> WebSocketOptions
WebSocketReader --> NoCopyByteArrayOutputStream
WebSocketReader --> WebSocketFrameHeader
WebSocketReader --> Utf8Validator
WebSocketReader --> Message
WebSocketReader -() Exception : throws
WebSocketReader ..> WebSocketException : throws
WebSocketReader --> ServerHandshake
WebSocketReader --> Close
WebSocketReader --> Ping
WebSocketReader --> Pong
WebSocketReader --> TextMessage
WebSocketReader --> RawTextMessage
WebSocketReader --> BinaryMessage
WebSocketReader -() UnsupportedEncodingException : throws
WebSocketReader ..> WebSocketStrings

enum ReaderState << MODEL >> {
	{static} STATE_CLOSED
	{static} STATE_CONNECTING
	{static} STATE_CLOSING
	{static} STATE_OPEN
}

class WebSocketWriter < extends Thread > {
	- {static} WEB_SOCKETS_VERSION:int
	- {static} CRLF:String
	- mRandom:Random
	- mWebSocketConnectionHandler:Handler
	- mWebSocketOptions:WebSocketOptions
	- mApplicationBuffer:ByteBuffer
	- mSocket:Socket
	- mOutputStream:OutputStream
	- mHandler:Handler

	+ WebSocketWriter(master:Handler, socket:Socket, options:WebSocketOptions, threadName:String)
	+ forward(message:Object)
	- notify(message:Object)
	- newHandshakeKey():String
	- newFrameMask():byte[]
	- sendClientHandshake(message:WebSocketMessage.ClientHandshake)
	- sendClose(message:WebSocketMessage.Close)
	- sendPing(message:WebSocketMessage.Ping)
	- sendPong(message:WebSocketMessage.Pong)
	- sendBinaryMessage(message:WebSocketMessage.BinaryMessage)
	- sendTextMessage(message:WebSocketMessage.TextMessage)
	- sendRawTextMessage(message:WebSocketMessage.RawTextMessage)
	# sendFrame(opcode:int, fin:boolean, payload:byte[])
	# sendFrame(opcode:int, fin:boolean, payload:byte[], offset:int, length:int)
	# processMessage(msg:Object)
	+ writeMessageToBuffer(message:Message)
	# processAppMessage(msg:Object)
	+ run()
}
WebSocketWriter +-- ThreadHandler
WebSocketWriter --> WebSocketOptions
WebSocketWriter --> Message
WebSocketWriter ..> ClientHandshake
WebSocketWriter -() IOException : throws
WebSocketWriter ..> Close
WebSocketWriter ..> WebSocketException : throws
WebSocketWriter ..> Ping
WebSocketWriter ..> Pong
WebSocketWriter ..> BinaryMessage
WebSocketWriter ..> TextMessage
WebSocketWriter ..> RawTextMessage
WebSocketWriter ..> WebSocketStrings
}

legend
	|= |= Type |
	|<back:PaleGreen>   </back>| Model |
	|<back:Moccasin>   </back>| View |
	|<back:Plum>   </back>| ViewModel |
endlegend

@enduml