@startuml

skinparam class {
    BackgroundColor Plum
    BorderColor Purple

	BackgroundColor<<PNG>> Moccasin
	BackgroundColor<<XML>> Moccasin
	BackgroundColor<<SHAPE>> Moccasin
	BackgroundColor<<JPG>> Moccasin

	BackgroundColor<<PREFERENCESCREEN>> PaleGreen
	BackgroundColor<<RESOURCES>> PaleGreen
	BackgroundColor<<MENU>> PaleGreen
	BackgroundColor<<TOOLBAR>> PaleGreen
	BackgroundColor<<NESTEDSCROLLVIEW>> PaleGreen
	BackgroundColor<<SET>> PaleGreen
	BackgroundColor<<MODEL>> PaleGreen

	ArrowColor Black

	BorderColor<<PNG>> Coral
	BorderColor<<XML>> Coral
	BorderColor<<SHAPE>> Coral
	BorderColor<<JPG>> Coral

	BorderColor<<PREFERENCESCREEN>> OliveDrab
	BorderColor<<RESOURCES>> OliveDrab
    BorderColor<<MENU>> OliveDrab
    BorderColor<<TOOLBAR>> OliveDrab
    BorderColor<<NESTEDSCROLLVIEW>> OliveDrab
    BorderColor<<SET>> OliveDrab
    BorderColor<<MODEL>> OliveDrab

}

interface AndroidManifest << (M,green) MANIFEST >>
interface ic_launcher << (P,blue) PNG >>
AndroidManifest --> ic_launcher
AndroidManifest --> Splashscreen
AndroidManifest --> Login
AndroidManifest --> ConnectDrawer
AndroidManifest ..> strings
AndroidManifest ..> styles

interface settings << (P,grey) PREFERENCESCREEN >>
settings ..> strings

interface colors << (R,yellow) RESOURCES >>
interface dimens << (R,yellow) RESOURCES >>
interface strings << (R,yellow) RESOURCES >>
interface styles << (R,yellow) RESOURCES >>
styles ..> colors

interface drawer_menu << (M,lightgrey) MENU >>

interface toolbar_layout << (T,lightyellow) TOOLBAR >>
toolbar_layout ..> styles

interface navigation_drawer_header << (X,lightblue) XML >>
interface dobbykopf << (P,blue) PNG >>
navigation_drawer_header ..> dobbykopf
navigation_drawer_header ..> head_background

interface fragment_information << (X,lightblue) XML >>
fragment_information ..> styles
fragment_information ..> dimens
fragment_information --> content_infoabout

interface fragment_connect << (X,lightblue) XML >>
fragment_connect ..> strings

interface content_infoabout << (N,darkgrey) NESTEDSCROLLVIEW >>
content_infoabout ..> strings
content_infoabout ..> dimens

interface activity_splash << (X,lightblue) XML >>
interface background << (J,blue) JPG >>
activity_splash ..> background
activity_splash --> logo

interface activity_login << (X,lightblue) XML >>
activity_login ..> dimens
activity_login --> logo

interface activity_connect_drawer << (X,lightblue) XML >>
activity_connect_drawer --> toolbar_layout
activity_connect_drawer --> drawer_menu
activity_connect_drawer ..> navigation_drawer_header

interface logo << (P,blue) PNG >>
interface head_background << (S,darkgreen) SHAPE >>
interface welcome_animation << (S,lightgreen) SET >>

class Splashscreen < extends Activity > {
	ImageView imageView
	Animation animation

	protected void onCreate(Bundle savedInstanceState)
	private void animationListener(Animation animation)
	public void onBackPressed()
}
Splashscreen ..> activity_splash
Splashscreen ..> welcome_animation
Splashscreen ..> Login

class Settings < extends Activity > {
	private static final String TAG_DISABLE_NOTIFICATIONS
	private static final String TAG_DISABLE_MULTIPLE_NOTIFICATIONS

	public void onCreate(Bundle savedInstanceState)
	public static Boolean pref_notifications_disabled (Context context)
	public static Boolean pref_multiple_notifications_disabled (Context context)
}
Settings +-- PrefsFragment
class PrefsFragment < extends PreferenceFragment > {
	public void onCreate(Bundle savedInstanceState)
}
PrefsFragment ..> settings

class LoginData <<MODEL>> {
	static String curruser
	static boolean logged
	String name
	String pass
	static ArrayList<LoginData> user

	static void main()
	public LoginData(String name, String pass)
	static boolean isValidName(String name)
	static boolean isValidPass(String name, String pass)
	static void setCurrUser(String Name)
	static String getCurrUser()
	static void setLogged()
	static void notLogged()
	static boolean getLogged()
}

class Login < extends AppCompatActivity > {
	Button confirm
	EditText NameText
	EditText PassText
	String Name
	String Pass
	CharSequence text

	protected void onCreate(Bundle savedInstanceState)
	public void onClickFunction(View v)
	private void setUser()
	private void startIntent()
	private void toastShow()
	public void onBackPressed()
}
Login ..> activity_login
Login ..> LoginData

class InformationFragment < extends Fragment > {
	public InformationFragment()

	public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState)
	private void clickListener(View view)
}
InformationFragment ..> fragment_information

class ConnectFragment < extends Fragment > {
	private static final String TAG_LOG
	private static final String TAG_JSON_TYPE
	private static final String TAG_JSON_MSG
	private volatile boolean isConnected
	private WebSocketConnection wsConnection
	private WebSocketOptions wsOptions
	private URI wsURI
	private EditText cmdInput
	private TextView cmdOutput
	private CircularProgressButton connectButton
	private String hostname
	private String portNumber
	private String timeout
	OnClickWrapper onClickWrapperExit

	public ConnectFragment()
	public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState)
	public void onResume()
	boolean wsConnect()
	void wsSend()
	public void onOpen()
	public void onClose (WebSocketCloseNotification code, String reason)
	public void onTextMessage (String payload)
	public void onRawTextMessage (byte[] payload)
	public void onBinaryMessage (byte[] payload)
	void show_info (String info, boolean showButton)
	static void appendText (TextView textView, String text, int textColor)
}
ConnectFragment ..> fragment_connect
ConnectFragment ..> strings

class ConnectDrawer < extends AppCompatActivity > {
	DrawerLayout drawerLayout
    Toolbar toolbar
    ActionBarDrawerToggle actionBarDrawerToggle
    FragmentTransaction fragmentTransaction
    NavigationView navigationView

    protected void onCreate(Bundle savedInstanceState)
    public void onBackPressed()
    protected void onPostCreate(Bundle savedInstanceState)
}
ConnectDrawer ..> activity_connect_drawer
ConnectDrawer ..> strings
ConnectDrawer --> ConnectFragment
ConnectDrawer ..> LoginData
ConnectDrawer ..> Splashscreen
ConnectDrawer --> InformationFragment



package SecureWebSocket {
ConnectFragment ..|> WebSocketConnectionObserver
ConnectFragment --> WebSocketConnection
ConnectFragment --> WebSocketOptions

class NoCopyByteArrayOutputStream < extends ByteArrayOutputStream > {
	public NoCopyByteArrayOutputStream()
	public NoCopyByteArrayOutputStream(int size)
	public InputStream getInputStream()
	public byte[] getByteArray()
}

class Utf8Validator << MODEL >>{
	private static final int[] DFA
	private static final int ACCEPT
	private static final int REJECT
	private int mState
	private int mPos

	public Utf8Validator()
	public void reset()
	public int position()
	public boolean isValid()
	public boolean validate(byte[] data, int off, int len)
	public boolean validate(byte[] data)
}

interface WebSocket {
	public static final String UTF8_ENCODING

	public void connect(URI uri, WebSocketConnectionObserver observer)
    public void connect(URI uri, WebSocketConnectionObserver observer, WebSocketOptions options)
    public void disconnect()
    public boolean isConnected()
    public void sendBinaryMessage(byte[] payload)
    public void sendRawTextMessage(byte[] payload)
    public void sendTextMessage(String payload)
}
WebSocket +-- WebSocketConnectionObserver
WebSocket ..> WebSocketOptions
WebSocket ..> WebSocketException : throws

interface WebSocketConnectionObserver {
	public void onOpen()
	public void onClose(WebSocketCloseNotification code, String reason)
	public void onTextMessage(String payload)
	public void onRawTextMessage(byte[] payload)
	public void onBinaryMessage(byte[] payload)
}
WebSocketConnectionObserver +-- WebSocketCloseNotification

enum WebSocketCloseNotification {
	NORMAL
	CANNOT_CONNECT
	CONNECTION_LOST
	PROTOCOL_ERROR
	INTERNAL_ERROR
	SERVER_ERROR
	RECONNECT
}

class WebSocketConnection implements WebSocket {
	private static final String TAG
	private static final String WS_URI_SCHEME
	private static final String WSS_URI_SCHEME
	private static final String WS_WRITER
	private static final String WS_READER
	private final Handler mHandler
	private WebSocketReader mWebSocketReader
	private WebSocketWriter mWebSocketWriter
	private Socket mSocket
	private SocketThread mSocketThread
	private URI mWebSocketURI
	private String[] mWebSocketSubprotocols
	private WeakReference<WebSocketConnectionObserver> mWebSocketConnectionObserver
	private WebSocketOptions mWebSocketOptions
	private boolean mPreviousConnection

	public WebSocketConnection()
	public void sendTextMessage(String payload)
	public void sendRawTextMessage(byte[] payload)
	public void sendBinaryMessage(byte[] payload)
	public boolean isConnected()
	private void failConnection(WebSocketCloseNotification code, String reason)
	public void connect(URI webSocketURI, WebSocket.WebSocketConnectionObserver connectionObserver)
	public void connect(URI webSocketURI, WebSocket.WebSocketConnectionObserver connectionObserver, WebSocketOptions options)
	public void connect(URI webSocketURI, String[] subprotocols, WebSocket.WebSocketConnectionObserver connectionObserver, WebSocketOptions options)
	public void disconnect()
	public boolean reconnect()
	private void connect()
	protected boolean scheduleReconnect()
	private void onClose(WebSocketCloseNotification code, String reason)
	protected void processAppMessage(Object message)
	protected void createWriter()
	protected void createReader()
	private void handleMessage(Message message)
}
WebSocketConnection +-- SocketThread
WebSocketConnection +-- ThreadHandler
WebSocketConnection --> WebSocketReader
WebSocketConnection --> WebSocketWriter
WebSocketConnection --> WebSocketOptions
WebSocketConnection ..> WebSocketConnectionObserver
WebSocketConnection --> TextMessage
WebSocketConnection --> RawTextMessage
WebSocketConnection --> BinaryMessage
WebSocketConnection ..> WebSocketCloseNotification
WebSocketConnection ..> WebSocketException : throws
WebSocketConnection --> ClientHandshake
WebSocketConnection ..> Message
WebSocketConnection --> Ping
WebSocketConnection --> Pong
WebSocketConnection --> Close
WebSocketConnection --> ServerHandshake
WebSocketConnection --> Error
WebSocketConnection --> ServerError

class SocketThread < extends Thread > {
	private static final String WS_CONNECTOR
	private final URI mWebSocketURI
	private Socket mSocket
	private String mFailureMessage
	private Handler mHandler

	public SocketThread(URI uri, WebSocketOptions options)
	public void run()
	public void startConnection()
	public void stopConnection()
	public Handler getHandler()
	public Socket getSocket()
	public String getFailureMessage()
}
SocketThread ..> WebSocketOptions

class ThreadHandler < extends Handler > {
	private final WeakReference<WebSocketConnection> mWebSocketConnection

	public ThreadHandler(WebSocketConnection webSocketConnection)
	public void handleMessage(Message message)
}
ThreadHandler ..> WebSocketConnection
ThreadHandler ..> Message

class WebSocketException < extends Exception > {
	private static final long serialVersionUID
	public WebSocketException(String message)
	public WebSocketException(String message, Throwable t)
}

class WebSocketFrameHeader {
	private int mOpcode
    private boolean mFin
    private int mReserved
    private int mHeaderLen
    private int mPayloadLen
    private int mTotalLen
    private byte[] mMask

    public int getOpcode()
    public void setOpcode(int opcode)
    public boolean isFin()
    public void setFin(boolean fin)
    public int getReserved()
    public void setReserved(int reserved)
    public int getHeaderLength()
    public void setHeaderLength(int headerLength)
    public int getPayloadLength()
    public void setPayloadLength(int payloadLength)
    public int getTotalLength()
    public void setTotalLen(int totalLength)
    public byte[] getMask()
    public void setMask(byte[] mask)
}

class WebSocketMessage {
}
WebSocketMessage +-- WebSocketCloseCode
WebSocketMessage +-- Message
WebSocketMessage +-- Quit
WebSocketMessage +-- ClientHandshake
WebSocketMessage +-- ServerHandshake
WebSocketMessage +-- ConnectionLost
WebSocketMessage +-- ServerError
WebSocketMessage +-- ProtocolViolation
WebSocketMessage +-- Error
WebSocketMessage +-- TextMessage
WebSocketMessage +-- RaxTextMessage
WebSocketMessage +-- BinaryMessage
WebSocketMessage +-- Close
WebSocketMessage +-- Ping
WebSocketMessage +-- Pong

class WebSocketCloseCode {
	public static final int NORMAL
	public static final int ENDPOINT_GOING_AWAY
	public static final int ENDPOINT_PROTOCOL_ERROR
	public static final int ENDPOINT_UNSUPPORTED_DATA_TYPE
	public static final int RESERVED
	public static final int RESERVED_NO_STATUS
	public static final int RESERVED_NO_CLOSING_HANDSHAKE
	public static final int ENDPOINT_BAD_DATA
	public static final int POLICY_VIOLATION
	public static final int MESSAGE_TOO_BIG
	public static final int ENDPOINT_NEEDS_EXTENSION
	public static final int UNEXPECTED_CONDITION
	public static final int RESERVED_TLS_REQUIRED
}

class Message
class Quit extends Message
class ConnectionLost extends Message

class ClientHandshake extends Message {
	private final URI mURI
	private final URI mOrigin
	private final String[] mSubprotocols

	ClientHandshake(URI uri)
	ClientHandshake(URI uri, URI origin, String[] subprotocols)
	public URI getURI()
	public String[] getSubprotocols()
}

class ServerHandshake extends Message {
	public boolean mSuccess

	public ServerHandshake(boolean success)
}

class ServerError extends Message {
	public int mStatusCode
	public String mStatusMessage

	public ServerError(int statusCode, String statusMessage)
}

class ProtocolViolation extends Message {
	public WebSocketException mException

	public ProtocolViolation(WebSocketException e)
}

class Error extends Message {
	public Exception mException

	public Error(Exception e)
}
Error -() Exception : sets

class TextMessage extends Message {
	public String mPayload

	TextMessage(String payload)
}

class RawTextMessage extends Message {
	public byte[] mPayload

	RawTextMessage(byte[] payload)
}

class BinaryMessage extends Message {
	public byte[] mPayload

	BinaryMessage(byte[] payload)
}

class Close extends Message {
	private int mCode
	private String mReason

	Close()
	Close(int code)
	Close(int code, String reason)
	public int getCode()
	public String getReason()
}
Close ..> WebSocketCloseCode

class Ping extends Message {
	public byte[] mPayload

	Ping()
	Ping(byte[] payload)
}

class Pong extends Message {
	public byte[] mPayload

	Pong()
	Pong(byte[] payload)
}

class WebSocketOptions {
	private int mMaxFramePayloadSize
    private int mMaxMessagePayloadSize
    private boolean mReceiveTextMessagesRaw
    private boolean mTcpNoDelay
    private int mSocketReceiveTimeout
    private int mSocketConnectTimeout
    private boolean mValidateIncomingUtf8
    private boolean mMaskClientFrames
    private int mReconnectInterval

    public WebSocketOptions()
    public WebSocketOptions(WebSocketOptions other)
    public void setReceiveTextMessagesRaw(boolean enabled)
    public boolean getReceiveTextMessagesRaw()
    public void setMaxFramePayloadSize(int size)
    public int getMaxFramePayloadSize()
    public void setMaxMessagePayloadSize(int size)
    public int getMaxMessagePayloadSize()
    public void setTcpNoDelay(boolean enabled)
    public boolean getTcpNoDelay()
    public void setSocketReceiveTimeout(int timeoutMs)
    public int getSocketReceiveTimeout()
    public void setSocketConnectTimeout(int timeoutMs)
    public int getSocketConnectTimeout()
    public void setValidateIncomingUtf8(boolean enabled)
    public boolean getValidateIncomingUtf8()
    public void setMaskClientFrames(boolean enabled)
    public boolean getMaskClientFrames()
    public void setReconnectInterval(int reconnectInterval)
    public int getReconnectInterval()
}

class WebSocketReader < extends Thread > {
	private static final String TAG
	private final Handler mWebSocketConnectionHandler
	private final Socket mSocket
	private InputStream mInputStream
	private final WebSocketOptions mWebSocketOptions
	private volatile boolean mStopped
	private final byte[] mNetworkBuffer
	private final ByteBuffer mApplicationBuffer
	private NoCopyByteArrayOutputStream mMessagePayload
	private ReaderState mState
	private boolean mInsideMessage
	private int mMessageOpcode
	private WebSocketFrameHeader mFrameHeader
	private Utf8Validator mUTF8Validator

	public WebSocketReader(Handler master, Socket socket, WebSocketOptions options, String threadName)
	public void quit()
	protected void notify(Object message)
	private boolean processData()
	protected void onHandshake(boolean success)
	protected void onClose(int code, String reason)
	protected void onPing(byte[] payload)
	protected void onPong(byte[] payload)
	protected void onTextMessage(String payload)
	protected void onRawTextMessage(byte[] payload)
	protected void onBinaryMessage(byte[] payload)
	private boolean processHandshake()
	private Pair<Integer, String> parseHTTPStatus()
	private boolean consumeData()
	public void run()
}
WebSocketReader +-- ReaderState
WebSocketReader --> WebSocketOptions
WebSocketReader --> NoCopyByteArrayOutputStream
WebSocketReader --> WebSocketFrameHeader
WebSocketReader --> Utf8Validator
WebSocketReader --> Message
WebSocketReader -() Exception : throws
WebSocketReader ..> WebSocketException : throws
WebSocketReader --> ServerHandshake
WebSocketReader --> Close
WebSocketReader --> Ping
WebSocketReader --> Pong
WebSocketReader --> TextMessage
WebSocketReader --> RawTextMessage
WebSocketReader --> BinaryMessage
WebSocketReader -() UnsupportedEncodingException : throws

enum ReaderState {
	STATE_CLOSED
	STATE_CONNECTING
	STATE_CLOSING
	STATE_OPEN
}

class WebSocketWriter < extends Thread > {
	private static final String TAG
	private static final int WEB_SOCKETS_VERSION
    private static final String CRLF
    private final Random mRandom
    private final Handler mWebSocketConnectionHandler
    private final WebSocketOptions mWebSocketOptions
    private final ByteBuffer mApplicationBuffer
    private final Socket mSocket
    private OutputStream mOutputStream
    private Handler mHandler

    public WebSocketWriter(Handler master, Socket socket, WebSocketOptions options, String threadName)
    public void forward(Object message)
    private void notify(Object message)
    private String newHandshakeKey()
    private byte[] newFrameMask()
    private void sendClientHandshake(WebSocketMessage.ClientHandshake message)
    private void sendClose(WebSocketMessage.Close message)
    private void sendPing(WebSocketMessage.Ping message)
    private void sendPong(WebSocketMessage.Pong message)
    private void sendBinaryMessage(WebSocketMessage.BinaryMessage message)
    private void sendTextMessage(WebSocketMessage.TextMessage message)
    private void sendRawTextMessage(WebSocketMessage.RawTextMessage message)
    protected void sendFrame(int opcode, boolean fin, byte[] payload)
    protected void sendFrame(int opcode, boolean fin, byte[] payload, int offset, int length)
    protected void processMessage(Object msg)
    public void writeMessageToBuffer(Message message)
    protected void processAppMessage(Object msg)
    public void run()
}
WebSocketWriter +-- ThreadHandler
WebSocketWriter --> WebSocketOptions
WebSocketWriter --> Message
WebSocketWriter ..> ClientHandshake
WebSocketWriter -() IOException : throws
WebSocketWriter ..> Close
WebSocketWriter ..> WebSocketException : throws
WebSocketWriter ..> Ping
WebSocketWriter ..> Pong
WebSocketWriter ..> BinaryMessage
WebSocketWriter ..> TextMessage
WebSocketWriter ..> RawTextMessage

class ThreadHandler < extends Handler > {
	private final WeakReference<WebSocketWriter> mWebSocketWriterReference

	public ThreadHandler(WebSocketWriter webSocketWriter)
	public void handleMessage(Message message)
}
ThreadHandler ..> WebSocketWriter
ThreadHandler ..> Message
}

legend
	|= |= Type |
	|<back:PaleGreen>   </back>| Model |
	|<back:Moccasin>   </back>| View |
	|<back:Plum>   </back>| ViewModel |
endlegend

@enduml